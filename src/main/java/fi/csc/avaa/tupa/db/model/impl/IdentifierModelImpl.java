package fi.csc.avaa.tupa.db.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import fi.csc.avaa.tupa.db.model.Identifier;
import fi.csc.avaa.tupa.db.model.IdentifierModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Identifier service. Represents a row in the &quot;identifier&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link fi.csc.avaa.tupa.db.model.IdentifierModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IdentifierImpl}.
 * </p>
 *
 * @author CSC
 * @see IdentifierImpl
 * @see fi.csc.avaa.tupa.db.model.Identifier
 * @see fi.csc.avaa.tupa.db.model.IdentifierModel
 * @generated
 */
public class IdentifierModelImpl extends BaseModelImpl<Identifier>
    implements IdentifierModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a identifier model instance should use the {@link fi.csc.avaa.tupa.db.model.Identifier} interface instead.
     */
    public static final String TABLE_NAME = "identifier";
    public static final Object[][] TABLE_COLUMNS = {
            { "identifier_type", Types.INTEGER },
            { "identifier_name", Types.VARCHAR },
            { "identifier_description_translation_key", Types.VARCHAR },
            { "resolution_url", Types.VARCHAR },
            { "definition_url", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table identifier (identifier_type INTEGER not null primary key,identifier_name VARCHAR(75) null,identifier_description_translation_key VARCHAR(75) null,resolution_url VARCHAR(75) null,definition_url VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table identifier";
    public static final String ORDER_BY_JPQL = " ORDER BY identifier.identifier_type ASC";
    public static final String ORDER_BY_SQL = " ORDER BY identifier.identifier_type ASC";
    public static final String DATA_SOURCE = "tupa";
    public static final String SESSION_FACTORY = "tupaSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.fi.csc.avaa.tupa.db.model.Identifier"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.fi.csc.avaa.tupa.db.model.Identifier"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.fi.csc.avaa.tupa.db.model.Identifier"),
            true);
    public static long IDENTIFIER_NAME_COLUMN_BITMASK = 1L;
    public static long IDENTIFIER_TYPE_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.fi.csc.avaa.tupa.db.model.Identifier"));
    private static ClassLoader _classLoader = Identifier.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Identifier.class
        };
    private int _identifier_type;
    private String _identifier_name;
    private String _originalIdentifier_name;
    private String _identifier_description_translation_key;
    private String _resolution_url;
    private String _definition_url;
    private long _columnBitmask;
    private Identifier _escapedModel;

    public IdentifierModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _identifier_type;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setIdentifier_type(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _identifier_type;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Identifier.class;
    }

    @Override
    public String getModelClassName() {
        return Identifier.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("identifier_type", getIdentifier_type());
        attributes.put("identifier_name", getIdentifier_name());
        attributes.put("identifier_description_translation_key",
            getIdentifier_description_translation_key());
        attributes.put("resolution_url", getResolution_url());
        attributes.put("definition_url", getDefinition_url());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer identifier_type = (Integer) attributes.get("identifier_type");

        if (identifier_type != null) {
            setIdentifier_type(identifier_type);
        }

        String identifier_name = (String) attributes.get("identifier_name");

        if (identifier_name != null) {
            setIdentifier_name(identifier_name);
        }

        String identifier_description_translation_key = (String) attributes.get(
                "identifier_description_translation_key");

        if (identifier_description_translation_key != null) {
            setIdentifier_description_translation_key(identifier_description_translation_key);
        }

        String resolution_url = (String) attributes.get("resolution_url");

        if (resolution_url != null) {
            setResolution_url(resolution_url);
        }

        String definition_url = (String) attributes.get("definition_url");

        if (definition_url != null) {
            setDefinition_url(definition_url);
        }
    }

    @Override
    public int getIdentifier_type() {
        return _identifier_type;
    }

    @Override
    public void setIdentifier_type(int identifier_type) {
        _identifier_type = identifier_type;
    }

    @Override
    public String getIdentifier_name() {
        if (_identifier_name == null) {
            return StringPool.BLANK;
        } else {
            return _identifier_name;
        }
    }

    @Override
    public void setIdentifier_name(String identifier_name) {
        _columnBitmask |= IDENTIFIER_NAME_COLUMN_BITMASK;

        if (_originalIdentifier_name == null) {
            _originalIdentifier_name = _identifier_name;
        }

        _identifier_name = identifier_name;
    }

    public String getOriginalIdentifier_name() {
        return GetterUtil.getString(_originalIdentifier_name);
    }

    @Override
    public String getIdentifier_description_translation_key() {
        if (_identifier_description_translation_key == null) {
            return StringPool.BLANK;
        } else {
            return _identifier_description_translation_key;
        }
    }

    @Override
    public void setIdentifier_description_translation_key(
        String identifier_description_translation_key) {
        _identifier_description_translation_key = identifier_description_translation_key;
    }

    @Override
    public String getResolution_url() {
        if (_resolution_url == null) {
            return StringPool.BLANK;
        } else {
            return _resolution_url;
        }
    }

    @Override
    public void setResolution_url(String resolution_url) {
        _resolution_url = resolution_url;
    }

    @Override
    public String getDefinition_url() {
        if (_definition_url == null) {
            return StringPool.BLANK;
        } else {
            return _definition_url;
        }
    }

    @Override
    public void setDefinition_url(String definition_url) {
        _definition_url = definition_url;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public Identifier toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Identifier) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        IdentifierImpl identifierImpl = new IdentifierImpl();

        identifierImpl.setIdentifier_type(getIdentifier_type());
        identifierImpl.setIdentifier_name(getIdentifier_name());
        identifierImpl.setIdentifier_description_translation_key(getIdentifier_description_translation_key());
        identifierImpl.setResolution_url(getResolution_url());
        identifierImpl.setDefinition_url(getDefinition_url());

        identifierImpl.resetOriginalValues();

        return identifierImpl;
    }

    @Override
    public int compareTo(Identifier identifier) {
        int primaryKey = identifier.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Identifier)) {
            return false;
        }

        Identifier identifier = (Identifier) obj;

        int primaryKey = identifier.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        IdentifierModelImpl identifierModelImpl = this;

        identifierModelImpl._originalIdentifier_name = identifierModelImpl._identifier_name;

        identifierModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Identifier> toCacheModel() {
        IdentifierCacheModel identifierCacheModel = new IdentifierCacheModel();

        identifierCacheModel.identifier_type = getIdentifier_type();

        identifierCacheModel.identifier_name = getIdentifier_name();

        String identifier_name = identifierCacheModel.identifier_name;

        if ((identifier_name != null) && (identifier_name.length() == 0)) {
            identifierCacheModel.identifier_name = null;
        }

        identifierCacheModel.identifier_description_translation_key = getIdentifier_description_translation_key();

        String identifier_description_translation_key = identifierCacheModel.identifier_description_translation_key;

        if ((identifier_description_translation_key != null) &&
                (identifier_description_translation_key.length() == 0)) {
            identifierCacheModel.identifier_description_translation_key = null;
        }

        identifierCacheModel.resolution_url = getResolution_url();

        String resolution_url = identifierCacheModel.resolution_url;

        if ((resolution_url != null) && (resolution_url.length() == 0)) {
            identifierCacheModel.resolution_url = null;
        }

        identifierCacheModel.definition_url = getDefinition_url();

        String definition_url = identifierCacheModel.definition_url;

        if ((definition_url != null) && (definition_url.length() == 0)) {
            identifierCacheModel.definition_url = null;
        }

        return identifierCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(11);

        sb.append("{identifier_type=");
        sb.append(getIdentifier_type());
        sb.append(", identifier_name=");
        sb.append(getIdentifier_name());
        sb.append(", identifier_description_translation_key=");
        sb.append(getIdentifier_description_translation_key());
        sb.append(", resolution_url=");
        sb.append(getResolution_url());
        sb.append(", definition_url=");
        sb.append(getDefinition_url());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(19);

        sb.append("<model><model-name>");
        sb.append("fi.csc.avaa.tupa.db.model.Identifier");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>identifier_type</column-name><column-value><![CDATA[");
        sb.append(getIdentifier_type());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>identifier_name</column-name><column-value><![CDATA[");
        sb.append(getIdentifier_name());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>identifier_description_translation_key</column-name><column-value><![CDATA[");
        sb.append(getIdentifier_description_translation_key());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>resolution_url</column-name><column-value><![CDATA[");
        sb.append(getResolution_url());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>definition_url</column-name><column-value><![CDATA[");
        sb.append(getDefinition_url());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
