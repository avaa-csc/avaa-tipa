package fi.csc.avaa.tupa.db.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import fi.csc.avaa.tupa.db.model.TpAPI;
import fi.csc.avaa.tupa.db.model.TpAPIModel;
import fi.csc.avaa.tupa.db.model.TpAPISoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the TpAPI service. Represents a row in the &quot;tupa_TpAPI&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link fi.csc.avaa.tupa.db.model.TpAPIModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TpAPIImpl}.
 * </p>
 *
 * @author CSC
 * @see TpAPIImpl
 * @see fi.csc.avaa.tupa.db.model.TpAPI
 * @see fi.csc.avaa.tupa.db.model.TpAPIModel
 * @generated
 */
@JSON(strict = true)
public class TpAPIModelImpl extends BaseModelImpl<TpAPI> implements TpAPIModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a tp a p i model instance should use the {@link fi.csc.avaa.tupa.db.model.TpAPI} interface instead.
     */
    public static final String TABLE_NAME = "tupa_TpAPI";
    public static final Object[][] TABLE_COLUMNS = {
            { "methodsDescription", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table tupa_TpAPI (methodsDescription VARCHAR(75) not null primary key)";
    public static final String TABLE_SQL_DROP = "drop table tupa_TpAPI";
    public static final String ORDER_BY_JPQL = " ORDER BY tpAPI.methodsDescription ASC";
    public static final String ORDER_BY_SQL = " ORDER BY tupa_TpAPI.methodsDescription ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.fi.csc.avaa.tupa.db.model.TpAPI"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.fi.csc.avaa.tupa.db.model.TpAPI"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.fi.csc.avaa.tupa.db.model.TpAPI"));
    private static ClassLoader _classLoader = TpAPI.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { TpAPI.class };
    private String _methodsDescription;
    private TpAPI _escapedModel;

    public TpAPIModelImpl() {
    }

    /**
     * Converts the soap model instance into a normal model instance.
     *
     * @param soapModel the soap model instance to convert
     * @return the normal model instance
     */
    public static TpAPI toModel(TpAPISoap soapModel) {
        if (soapModel == null) {
            return null;
        }

        TpAPI model = new TpAPIImpl();

        model.setMethodsDescription(soapModel.getMethodsDescription());

        return model;
    }

    /**
     * Converts the soap model instances into normal model instances.
     *
     * @param soapModels the soap model instances to convert
     * @return the normal model instances
     */
    public static List<TpAPI> toModels(TpAPISoap[] soapModels) {
        if (soapModels == null) {
            return null;
        }

        List<TpAPI> models = new ArrayList<TpAPI>(soapModels.length);

        for (TpAPISoap soapModel : soapModels) {
            models.add(toModel(soapModel));
        }

        return models;
    }

    @Override
    public String getPrimaryKey() {
        return _methodsDescription;
    }

    @Override
    public void setPrimaryKey(String primaryKey) {
        setMethodsDescription(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _methodsDescription;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey((String) primaryKeyObj);
    }

    @Override
    public Class<?> getModelClass() {
        return TpAPI.class;
    }

    @Override
    public String getModelClassName() {
        return TpAPI.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("methodsDescription", getMethodsDescription());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        String methodsDescription = (String) attributes.get(
                "methodsDescription");

        if (methodsDescription != null) {
            setMethodsDescription(methodsDescription);
        }
    }

    @JSON
    @Override
    public String getMethodsDescription() {
        if (_methodsDescription == null) {
            return StringPool.BLANK;
        } else {
            return _methodsDescription;
        }
    }

    @Override
    public void setMethodsDescription(String methodsDescription) {
        _methodsDescription = methodsDescription;
    }

    @Override
    public TpAPI toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (TpAPI) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        TpAPIImpl tpAPIImpl = new TpAPIImpl();

        tpAPIImpl.setMethodsDescription(getMethodsDescription());

        tpAPIImpl.resetOriginalValues();

        return tpAPIImpl;
    }

    @Override
    public int compareTo(TpAPI tpAPI) {
        String primaryKey = tpAPI.getPrimaryKey();

        return getPrimaryKey().compareTo(primaryKey);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof TpAPI)) {
            return false;
        }

        TpAPI tpAPI = (TpAPI) obj;

        String primaryKey = tpAPI.getPrimaryKey();

        if (getPrimaryKey().equals(primaryKey)) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey().hashCode();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<TpAPI> toCacheModel() {
        TpAPICacheModel tpAPICacheModel = new TpAPICacheModel();

        tpAPICacheModel.methodsDescription = getMethodsDescription();

        String methodsDescription = tpAPICacheModel.methodsDescription;

        if ((methodsDescription != null) && (methodsDescription.length() == 0)) {
            tpAPICacheModel.methodsDescription = null;
        }

        return tpAPICacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(3);

        sb.append("{methodsDescription=");
        sb.append(getMethodsDescription());

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(7);

        sb.append("<model><model-name>");
        sb.append("fi.csc.avaa.tupa.db.model.TpAPI");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>methodsDescription</column-name><column-value><![CDATA[");
        sb.append(getMethodsDescription());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
