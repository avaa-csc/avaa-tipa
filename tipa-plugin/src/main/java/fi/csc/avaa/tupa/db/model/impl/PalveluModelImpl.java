package fi.csc.avaa.tupa.db.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import fi.csc.avaa.tupa.db.model.Palvelu;
import fi.csc.avaa.tupa.db.model.PalveluModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Palvelu service. Represents a row in the &quot;palvelu&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link fi.csc.avaa.tupa.db.model.PalveluModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PalveluImpl}.
 * </p>
 *
 * @author pj,jmlehtin
 * @see PalveluImpl
 * @see fi.csc.avaa.tupa.db.model.Palvelu
 * @see fi.csc.avaa.tupa.db.model.PalveluModel
 * @generated
 */
public class PalveluModelImpl extends BaseModelImpl<Palvelu>
    implements PalveluModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a palvelu model instance should use the {@link fi.csc.avaa.tupa.db.model.Palvelu} interface instead.
     */
    public static final String TABLE_NAME = "palvelu";
    public static final Object[][] TABLE_COLUMNS = {
            { "palvelu_id", Types.INTEGER },
            { "nimi", Types.VARCHAR },
            { "name", Types.VARCHAR },
            { "kuvaus", Types.VARCHAR },
            { "description", Types.VARCHAR },
            { "URLen", Types.VARCHAR },
            { "URLfi", Types.VARCHAR },
            { "paikkatyyppi", Types.INTEGER },
            { "katuosoite", Types.VARCHAR },
            { "kaupunki", Types.VARCHAR },
            { "lat", Types.DOUBLE },
            { "lon", Types.DOUBLE }
        };
    public static final String TABLE_SQL_CREATE = "create table palvelu (palvelu_id INTEGER not null primary key,nimi VARCHAR(75) null,name VARCHAR(75) null,kuvaus VARCHAR(75) null,description VARCHAR(75) null,URLen VARCHAR(75) null,URLfi VARCHAR(75) null,paikkatyyppi INTEGER,katuosoite VARCHAR(75) null,kaupunki VARCHAR(75) null,lat DOUBLE,lon DOUBLE)";
    public static final String TABLE_SQL_DROP = "drop table palvelu";
    public static final String ORDER_BY_JPQL = " ORDER BY palvelu.palvelu_id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY palvelu.palvelu_id ASC";
    public static final String DATA_SOURCE = "tupa";
    public static final String SESSION_FACTORY = "tupaSessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.fi.csc.avaa.tupa.db.model.Palvelu"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.fi.csc.avaa.tupa.db.model.Palvelu"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.fi.csc.avaa.tupa.db.model.Palvelu"));
    private static ClassLoader _classLoader = Palvelu.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            Palvelu.class
        };
    private int _palvelu_id;
    private String _nimi;
    private String _name;
    private String _kuvaus;
    private String _description;
    private String _URLen;
    private String _URLfi;
    private int _paikkatyyppi;
    private String _katuosoite;
    private String _kaupunki;
    private double _lat;
    private double _lon;
    private Palvelu _escapedModel;

    public PalveluModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _palvelu_id;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setPalvelu_id(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _palvelu_id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Palvelu.class;
    }

    @Override
    public String getModelClassName() {
        return Palvelu.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("palvelu_id", getPalvelu_id());
        attributes.put("nimi", getNimi());
        attributes.put("name", getName());
        attributes.put("kuvaus", getKuvaus());
        attributes.put("description", getDescription());
        attributes.put("URLen", getURLen());
        attributes.put("URLfi", getURLfi());
        attributes.put("paikkatyyppi", getPaikkatyyppi());
        attributes.put("katuosoite", getKatuosoite());
        attributes.put("kaupunki", getKaupunki());
        attributes.put("lat", getLat());
        attributes.put("lon", getLon());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer palvelu_id = (Integer) attributes.get("palvelu_id");

        if (palvelu_id != null) {
            setPalvelu_id(palvelu_id);
        }

        String nimi = (String) attributes.get("nimi");

        if (nimi != null) {
            setNimi(nimi);
        }

        String name = (String) attributes.get("name");

        if (name != null) {
            setName(name);
        }

        String kuvaus = (String) attributes.get("kuvaus");

        if (kuvaus != null) {
            setKuvaus(kuvaus);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        String URLen = (String) attributes.get("URLen");

        if (URLen != null) {
            setURLen(URLen);
        }

        String URLfi = (String) attributes.get("URLfi");

        if (URLfi != null) {
            setURLfi(URLfi);
        }

        Integer paikkatyyppi = (Integer) attributes.get("paikkatyyppi");

        if (paikkatyyppi != null) {
            setPaikkatyyppi(paikkatyyppi);
        }

        String katuosoite = (String) attributes.get("katuosoite");

        if (katuosoite != null) {
            setKatuosoite(katuosoite);
        }

        String kaupunki = (String) attributes.get("kaupunki");

        if (kaupunki != null) {
            setKaupunki(kaupunki);
        }

        Double lat = (Double) attributes.get("lat");

        if (lat != null) {
            setLat(lat);
        }

        Double lon = (Double) attributes.get("lon");

        if (lon != null) {
            setLon(lon);
        }
    }

    @Override
    public int getPalvelu_id() {
        return _palvelu_id;
    }

    @Override
    public void setPalvelu_id(int palvelu_id) {
        _palvelu_id = palvelu_id;
    }

    @Override
    public String getNimi() {
        if (_nimi == null) {
            return StringPool.BLANK;
        } else {
            return _nimi;
        }
    }

    @Override
    public void setNimi(String nimi) {
        _nimi = nimi;
    }

    @Override
    public String getName() {
        if (_name == null) {
            return StringPool.BLANK;
        } else {
            return _name;
        }
    }

    @Override
    public void setName(String name) {
        _name = name;
    }

    @Override
    public String getKuvaus() {
        if (_kuvaus == null) {
            return StringPool.BLANK;
        } else {
            return _kuvaus;
        }
    }

    @Override
    public void setKuvaus(String kuvaus) {
        _kuvaus = kuvaus;
    }

    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @Override
    public String getURLen() {
        if (_URLen == null) {
            return StringPool.BLANK;
        } else {
            return _URLen;
        }
    }

    @Override
    public void setURLen(String URLen) {
        _URLen = URLen;
    }

    @Override
    public String getURLfi() {
        if (_URLfi == null) {
            return StringPool.BLANK;
        } else {
            return _URLfi;
        }
    }

    @Override
    public void setURLfi(String URLfi) {
        _URLfi = URLfi;
    }

    @Override
    public int getPaikkatyyppi() {
        return _paikkatyyppi;
    }

    @Override
    public void setPaikkatyyppi(int paikkatyyppi) {
        _paikkatyyppi = paikkatyyppi;
    }

    @Override
    public String getKatuosoite() {
        if (_katuosoite == null) {
            return StringPool.BLANK;
        } else {
            return _katuosoite;
        }
    }

    @Override
    public void setKatuosoite(String katuosoite) {
        _katuosoite = katuosoite;
    }

    @Override
    public String getKaupunki() {
        if (_kaupunki == null) {
            return StringPool.BLANK;
        } else {
            return _kaupunki;
        }
    }

    @Override
    public void setKaupunki(String kaupunki) {
        _kaupunki = kaupunki;
    }

    @Override
    public double getLat() {
        return _lat;
    }

    @Override
    public void setLat(double lat) {
        _lat = lat;
    }

    @Override
    public double getLon() {
        return _lon;
    }

    @Override
    public void setLon(double lon) {
        _lon = lon;
    }

    @Override
    public Palvelu toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Palvelu) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        PalveluImpl palveluImpl = new PalveluImpl();

        palveluImpl.setPalvelu_id(getPalvelu_id());
        palveluImpl.setNimi(getNimi());
        palveluImpl.setName(getName());
        palveluImpl.setKuvaus(getKuvaus());
        palveluImpl.setDescription(getDescription());
        palveluImpl.setURLen(getURLen());
        palveluImpl.setURLfi(getURLfi());
        palveluImpl.setPaikkatyyppi(getPaikkatyyppi());
        palveluImpl.setKatuosoite(getKatuosoite());
        palveluImpl.setKaupunki(getKaupunki());
        palveluImpl.setLat(getLat());
        palveluImpl.setLon(getLon());

        palveluImpl.resetOriginalValues();

        return palveluImpl;
    }

    @Override
    public int compareTo(Palvelu palvelu) {
        int primaryKey = palvelu.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Palvelu)) {
            return false;
        }

        Palvelu palvelu = (Palvelu) obj;

        int primaryKey = palvelu.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
    }

    @Override
    public CacheModel<Palvelu> toCacheModel() {
        PalveluCacheModel palveluCacheModel = new PalveluCacheModel();

        palveluCacheModel.palvelu_id = getPalvelu_id();

        palveluCacheModel.nimi = getNimi();

        String nimi = palveluCacheModel.nimi;

        if ((nimi != null) && (nimi.length() == 0)) {
            palveluCacheModel.nimi = null;
        }

        palveluCacheModel.name = getName();

        String name = palveluCacheModel.name;

        if ((name != null) && (name.length() == 0)) {
            palveluCacheModel.name = null;
        }

        palveluCacheModel.kuvaus = getKuvaus();

        String kuvaus = palveluCacheModel.kuvaus;

        if ((kuvaus != null) && (kuvaus.length() == 0)) {
            palveluCacheModel.kuvaus = null;
        }

        palveluCacheModel.description = getDescription();

        String description = palveluCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            palveluCacheModel.description = null;
        }

        palveluCacheModel.URLen = getURLen();

        String URLen = palveluCacheModel.URLen;

        if ((URLen != null) && (URLen.length() == 0)) {
            palveluCacheModel.URLen = null;
        }

        palveluCacheModel.URLfi = getURLfi();

        String URLfi = palveluCacheModel.URLfi;

        if ((URLfi != null) && (URLfi.length() == 0)) {
            palveluCacheModel.URLfi = null;
        }

        palveluCacheModel.paikkatyyppi = getPaikkatyyppi();

        palveluCacheModel.katuosoite = getKatuosoite();

        String katuosoite = palveluCacheModel.katuosoite;

        if ((katuosoite != null) && (katuosoite.length() == 0)) {
            palveluCacheModel.katuosoite = null;
        }

        palveluCacheModel.kaupunki = getKaupunki();

        String kaupunki = palveluCacheModel.kaupunki;

        if ((kaupunki != null) && (kaupunki.length() == 0)) {
            palveluCacheModel.kaupunki = null;
        }

        palveluCacheModel.lat = getLat();

        palveluCacheModel.lon = getLon();

        return palveluCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(25);

        sb.append("{palvelu_id=");
        sb.append(getPalvelu_id());
        sb.append(", nimi=");
        sb.append(getNimi());
        sb.append(", name=");
        sb.append(getName());
        sb.append(", kuvaus=");
        sb.append(getKuvaus());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", URLen=");
        sb.append(getURLen());
        sb.append(", URLfi=");
        sb.append(getURLfi());
        sb.append(", paikkatyyppi=");
        sb.append(getPaikkatyyppi());
        sb.append(", katuosoite=");
        sb.append(getKatuosoite());
        sb.append(", kaupunki=");
        sb.append(getKaupunki());
        sb.append(", lat=");
        sb.append(getLat());
        sb.append(", lon=");
        sb.append(getLon());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(40);

        sb.append("<model><model-name>");
        sb.append("fi.csc.avaa.tupa.db.model.Palvelu");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>palvelu_id</column-name><column-value><![CDATA[");
        sb.append(getPalvelu_id());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>nimi</column-name><column-value><![CDATA[");
        sb.append(getNimi());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>name</column-name><column-value><![CDATA[");
        sb.append(getName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>kuvaus</column-name><column-value><![CDATA[");
        sb.append(getKuvaus());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>URLen</column-name><column-value><![CDATA[");
        sb.append(getURLen());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>URLfi</column-name><column-value><![CDATA[");
        sb.append(getURLfi());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>paikkatyyppi</column-name><column-value><![CDATA[");
        sb.append(getPaikkatyyppi());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>katuosoite</column-name><column-value><![CDATA[");
        sb.append(getKatuosoite());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>kaupunki</column-name><column-value><![CDATA[");
        sb.append(getKaupunki());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lat</column-name><column-value><![CDATA[");
        sb.append(getLat());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lon</column-name><column-value><![CDATA[");
        sb.append(getLon());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
